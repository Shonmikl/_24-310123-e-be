Напишите метод countWords(String[] words),
который будет принимать
массив строк words и возвращать количество слов в массиве.
Для решения задачи используйте метод split() класса String,
который разделяет строку на подстроки на основе заданного разделителя (пробела).
Подсчитайте количество полученных подстрок и верните результат.

Напишите метод findLongestWord(String[] words),
который будет принимать массив строк words и возвращать
самое длинное слово из массива. Для решения задачи используйте переменную
для хранения текущего самого длинного слова и обновляйте ее при нахождении
более длинного слова в массиве.

Напишите метод findWordsStartingWithLetter(List<String> words, char letter),
который будет принимать список строк words и символ letter, и возвращать новый
список, содержащий только те слова из исходного списка, которые начинаются с
заданной буквы letter. Используйте цикл for-each для перебора элементов списка
и условие startsWith() класса String для проверки начальной буквы.

Напишите метод concatenateStrings(List<String> words),
который будет принимать список строк words и объединять их
в одну строку, разделяя каждое слово пробелом. Для решения
задачи используйте переменную для хранения результирующей строки
и цикл for-each, чтобы перебрать элементы списка и добавить их к
результирующей строке.

Напишите метод calculateMatrixSum(int[][] matrix),
который будет принимать двумерный массив matrix и возвращать
сумму всех элементов матрицы. Для решения задачи используйте два
вложенных цикла for для перебора элементов матрицы и суммируйте их значения.

Напишите метод findMaximumInMatrix(int[][] matrix),
который будет принимать двумерный массив matrix и возвращать максимальное
значение из всех элементов матрицы. Для решения задачи используйте переменную
для хранения текущего максимального значения и обновляйте ее при нахождении более
большого значения в матрице.

Напишите метод printMapEntries(Map<Integer, String> map),
который будет принимать карту map и выводить на экран все пары
ключ-значение, используя цикл for-each для перебора элементов карты.

Напишите метод findKeyByValue(Map<Integer, String> map, String value),
который будет принимать карту map и строку value, и возвращать ключ,
соответствующий заданному значению. Для решения задачи используйте цикл
for-each для перебора элементов карты и условие equals() класса String для
сравнения значений.



 - класс Клиент
    - имя
    - возраст
    - номер паспорта
    - лист банковских карт
 - класс Банковская карта
    - срок действия
    - статус
    - платежная система
    - остаток на счету
    - валюта
 - класс Хранилище
    - мапа которая хранит ---Клиент, ЛистКарт--- TreeMap
    * Add Read(валюта) Update Delete
 - класс Генератор
    * генерация Клиента
    * генерация банковских карт
 - класс Мэйн